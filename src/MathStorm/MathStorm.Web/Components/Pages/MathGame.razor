@page "/"
@rendermode InteractiveServer
@inject IGameService GameService
@using MathStorm.Web.Components.Game
@implements IDisposable

<PageTitle>Math Storm</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header text-center">
                    <h1 class="display-4"><img src="Hero.png" alt="Math Storm" width="96" height="96"> Math Storm</h1>
                    <p class="lead">Test your mathematical skills with our lightning-fast math game!</p>
                </div>
                <div class="card-body">
                    @if (!gameSession.IsGameStarted)
                    {
                        <div class="row">
                            <div class="col-md-12 mb-4">
                                <h3><i class="fas fa-cog"></i> Select Difficulty Level</h3>
                                <div class="row">
                                    <div class="col-md-6 col-lg-3 mb-3">
                                        <div class="card @(selectedDifficulty == Difficulty.Beginner ? "border-primary bg-light" : "") difficulty-card" 
                                             @onclick="() => SelectDifficulty(Difficulty.Beginner)" style="cursor: pointer;">
                                            <div class="card-body text-center">
                                                <h5 class="card-title text-success">ðŸŒ± Beginner</h5>
                                                <p class="card-text small">
                                                    5 questions<br>
                                                    2-digit numbers<br>
                                                    Addition & Subtraction only
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-lg-3 mb-3">
                                        <div class="card @(selectedDifficulty == Difficulty.Novice ? "border-primary bg-light" : "") difficulty-card" 
                                             @onclick="() => SelectDifficulty(Difficulty.Novice)" style="cursor: pointer;">
                                            <div class="card-body text-center">
                                                <h5 class="card-title text-info">ðŸš€ Novice</h5>
                                                <p class="card-text small">
                                                    5 questions<br>
                                                    2-digit numbers<br>
                                                    All operations
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-lg-3 mb-3">
                                        <div class="card @(selectedDifficulty == Difficulty.Intermediate ? "border-primary bg-light" : "") difficulty-card" 
                                             @onclick="() => SelectDifficulty(Difficulty.Intermediate)" style="cursor: pointer;">
                                            <div class="card-body text-center">
                                                <h5 class="card-title text-warning">âš¡ Intermediate</h5>
                                                <p class="card-text small">
                                                    10 questions<br>
                                                    3-digit numbers<br>
                                                    All operations
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-lg-3 mb-3">
                                        <div class="card @(selectedDifficulty == Difficulty.Expert ? "border-primary bg-light" : "") difficulty-card" 
                                             @onclick="() => SelectDifficulty(Difficulty.Expert)" style="cursor: pointer;">
                                            <div class="card-body text-center">
                                                <h5 class="card-title text-danger">ðŸ”¥ Expert</h5>
                                                <p class="card-text small">
                                                    10 questions<br>
                                                    4-digit numbers<br>
                                                    All operations
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <h3><i class="fas fa-gamepad"></i> How to Play</h3>
                                <ul class="list-unstyled">
                                    <li><i class="fas fa-check text-success"></i> Answer math questions quickly and accurately</li>
                                    <li><i class="fas fa-clock text-info"></i> Questions are timed to the tenth of a second</li>
                                    <li><i class="fas fa-calculator text-warning"></i> Operations depend on difficulty level</li>
                                    <li><i class="fas fa-trophy text-primary"></i> Score based on both speed and accuracy</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h3><i class="fas fa-chart-line"></i> Scoring</h3>
                                <ul class="list-unstyled">
                                    <li><i class="fas fa-bullseye text-success"></i> Perfect accuracy = Lower score</li>
                                    <li><i class="fas fa-tachometer-alt text-info"></i> Faster answers = Lower score</li>
                                    <li><i class="fas fa-medal text-warning"></i> Lower total scores are better!</li>
                                    <li><i class="fas fa-formula text-primary"></i> Score is based on both accuracy and time to answer</li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="text-center mt-4">
                            <button class="btn btn-primary btn-lg" @onclick="StartGame">
                                <i class="fas fa-play"></i> Start @selectedDifficulty Level
                            </button>
                        </div>
                    }
                    else if (!gameSession.IsGameComplete)
                    {
                        <QuestionComponent GameSession="@gameSession" OnAnswerSubmitted="HandleAnswerSubmitted" />
                    }
                    else
                    {
                        <ResultsComponent GameSession="@gameSession" OnRestartGame="RestartGame" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private GameSession gameSession = new();
    private Difficulty selectedDifficulty = Difficulty.Intermediate;

    protected override void OnInitialized()
    {
        gameSession = GameService.CreateNewGame(selectedDifficulty);
    }

    private void SelectDifficulty(Difficulty difficulty)
    {
        selectedDifficulty = difficulty;
        gameSession = GameService.CreateNewGame(selectedDifficulty);
        StateHasChanged();
    }

    private void StartGame()
    {
        gameSession = GameService.CreateNewGame(selectedDifficulty);
        gameSession.IsGameStarted = true;
        GameService.StartQuestion(gameSession);
        StateHasChanged();
    }

    private async Task HandleAnswerSubmitted(double userAnswer)
    {
        GameService.SubmitAnswer(gameSession, userAnswer);
        
        if (gameSession.CurrentQuestionIndex < gameSession.Questions.Count - 1)
        {
            GameService.NextQuestion(gameSession);
            GameService.StartQuestion(gameSession);
        }
        else
        {
            GameService.NextQuestion(gameSession);
        }
        
        StateHasChanged();
        
        // Small delay to ensure state has updated before next question renders
        await Task.Delay(50);
    }

    private void RestartGame()
    {
        gameSession = GameService.CreateNewGame(selectedDifficulty);
        StateHasChanged();
    }

    public void Dispose()
    {
        // Nothing to dispose in this component
    }
}