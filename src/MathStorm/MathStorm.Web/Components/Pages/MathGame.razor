@page "/"
@rendermode InteractiveServer
@inject IGameService GameService
@using MathStorm.Web.Components.Game
@implements IDisposable

<PageTitle>Math Storm</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header text-center">
                    <h1 class="display-4"><i class="fas fa-calculator text-primary"></i> Math Storm</h1>
                    <p class="lead">Test your mathematical skills with our lightning-fast math game!</p>
                </div>
                <div class="card-body">
                    @if (!gameSession.IsGameStarted)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <h3><i class="fas fa-gamepad"></i> How to Play</h3>
                                <ul class="list-unstyled">
                                    <li><i class="fas fa-check text-success"></i> Answer 10 random math questions</li>
                                    <li><i class="fas fa-clock text-info"></i> Questions are timed to the tenth of a second</li>
                                    <li><i class="fas fa-calculator text-warning"></i> Covers addition, subtraction, multiplication, and division</li>
                                    <li><i class="fas fa-trophy text-primary"></i> Score based on speed and accuracy</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h3><i class="fas fa-chart-line"></i> Scoring</h3>
                                <ul class="list-unstyled">
                                    <li><i class="fas fa-bullseye text-success"></i> Perfect accuracy = Lower score</li>
                                    <li><i class="fas fa-tachometer-alt text-info"></i> Faster answers = Lower score</li>
                                    <li><i class="fas fa-medal text-warning"></i> Lower total scores are better!</li>
                                    <li><i class="fas fa-formula text-primary"></i> Score = Time Ã— Error Percentage</li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="text-center mt-4">
                            <button class="btn btn-primary btn-lg" @onclick="StartGame">
                                <i class="fas fa-play"></i> Start Playing Math Storm
                            </button>
                        </div>
                    }
                    else if (!gameSession.IsGameComplete)
                    {
                        <QuestionComponent GameSession="@gameSession" OnAnswerSubmitted="HandleAnswerSubmitted" />
                    }
                    else
                    {
                        <ResultsComponent GameSession="@gameSession" OnRestartGame="RestartGame" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private GameSession gameSession = new();

    protected override void OnInitialized()
    {
        gameSession = GameService.CreateNewGame();
    }

    private void StartGame()
    {
        gameSession = GameService.CreateNewGame();
        gameSession.IsGameStarted = true;
        GameService.StartQuestion(gameSession);
        StateHasChanged();
    }

    private async Task HandleAnswerSubmitted(double userAnswer)
    {
        GameService.SubmitAnswer(gameSession, userAnswer);
        
        if (gameSession.CurrentQuestionIndex < gameSession.Questions.Count - 1)
        {
            GameService.NextQuestion(gameSession);
            GameService.StartQuestion(gameSession);
        }
        else
        {
            GameService.NextQuestion(gameSession);
        }
        
        StateHasChanged();
        
        // Small delay to ensure state has updated before next question renders
        await Task.Delay(50);
    }

    private void RestartGame()
    {
        gameSession = GameService.CreateNewGame();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Nothing to dispose in this component
    }
}