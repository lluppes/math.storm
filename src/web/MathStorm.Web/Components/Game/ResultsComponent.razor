@rendermode InteractiveServer
@inject MathStorm.Web.Services.IRemoteFunctionsService FunctionService
@using MathStorm.Web.Components.Game
@using MathStorm.Common.DTOs

<div class="row">
    <div class="col">
        <div class="text-center mb-4">
            <h2><i class="fas fa-trophy"></i> Game Complete!</h2>
            <h4 class="text-primary">Total Score: @GameSession.TotalScore.ToString("F1")</h4>
            <p class="text-muted">Lower scores are better! (Error% × Time + Time × 10)</p>
        </div>

        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-chart-line"></i> Detailed Results</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Question</th>
                                <th class="text-end">Your Answer</th>
                                <th class="text-end">Correct Answer</th>
                                <th class="text-end">Error %</th>
                                <th class="text-end">Time (s)</th>
                                <th class="text-end">Score</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var question in GameSession.Questions)
                            {
                                <tr class="@GetRowClass(question)">
                                    <td><span class="me-2 @GetOperationColorClass(question.Operation)">@GetOperationSymbol(question.Operation)</span>@question.QuestionText</td>
                                    <td class="text-end">@(question.UserAnswer.HasValue ? FormatAnswer(question.UserAnswer.Value, question.Operation) : "N/A")</td>
                                    <td class="text-end">@FormatAnswer(question.CorrectAnswer, question.Operation)</td>
                                    <td class="text-end">
                                        <span class="badge @GetErrorBadgeClass(question.PercentageDifference)">
                                            @question.PercentageDifference.ToString("F1")%
                                        </span>
                                    </td>
                                    <td class="text-end">@question.TimeInSeconds.ToString("F1")</td>
                                    <td class="text-end">@question.Score.ToString("F1")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot class="table-dark">
                            <tr>
                                <td colspan="5"><strong>Total Score:</strong></td>
                                <td class="text-end"><strong>@GameSession.TotalScore.ToString("F1")</strong></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>

        @if (showLeaderboard)
        {
            <LeaderboardComponent LeaderboardEntries="@leaderboardEntries" 
                                  Difficulty="@GameSession.Difficulty.ToString()" 
                                  CurrentUserId="@currentUserId"
                                  UserMadeLeaderboard="@userMadeLeaderboard" />
        }

        @* GenAI Analysis Section *@
        @if (isAnalysisLoading)
        {
            <div class="card mt-4 analysis-card">
                <div class="card-header bg-info text-white">
                    <h5><i class="fas fa-robot"></i> Post-Game Analysis</h5>
                </div>
                <div class="card-body text-center">
                    <div class="spinner-border text-info" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Analyzing... please wait...</p>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(analysisResult))
        {
            <div class="card mt-4 analysis-card">
                <div class="card-header bg-success text-white">
                    <h5><i class="fas fa-robot"></i> Post-Game Analysis from @selectedPersonalityDisplay:</h5>
                </div>
                <div class="card-body analysis-content">
                    <div class="analysis-text">
                        @((MarkupString)analysisResult.Replace("\n", "<br />"))
                    </div>
                </div>
            </div>
        }

        <div class="text-center mt-4">
            <button class="btn btn-primary btn-lg" @onclick="RestartGame">
                <i class="fas fa-redo"></i> Play Again
            </button>
        </div>

        <div class="card mt-4">
            <div class="card-body">
                <h6><i class="fas fa-info-circle"></i> Scoring Information</h6>
                <ul class="list-unstyled mb-0">
                    <li><i class="fas fa-check text-success"></i> <strong>Perfect answers (0% error):</strong> Score = Time × 10</li>
                    <li><i class="fas fa-exclamation text-warning"></i> <strong>Close answers (1-10% error):</strong> Low accuracy penalty</li>
                    <li><i class="fas fa-times text-danger"></i> <strong>Incorrect answers (>10% error):</strong> High accuracy penalty</li>
                    <li><i class="fas fa-clock text-info"></i> <strong>Speed matters:</strong> Faster answers get lower scores</li>
                    <li><i class="fas fa-calculator text-primary"></i> <strong>Formula:</strong> (Error% × Time) + (Time × 10)</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<UsernamePromptComponent IsVisible="@showUsernamePrompt" 
                         TotalScore="@GameSession.TotalScore" 
                         OnSave="@HandleSaveScore" 
                         OnSkip="@HandleSkipSave" />

@code {
    [Parameter] public GameSession GameSession { get; set; } = new();
    [Parameter] public EventCallback OnRestartGame { get; set; }

    private bool showUsernamePrompt = true;
    private bool showLeaderboard = false;
    private List<LeaderboardEntry>? leaderboardEntries;
    private string? currentUserId;
    private bool userMadeLeaderboard = false;
    
    // Analysis state
    private bool isAnalysisLoading = false;
    private string analysisResult = string.Empty;
    private string selectedPersonalityDisplay = string.Empty;

    protected override void OnInitialized()
    {
        // Show username prompt initially
        showUsernamePrompt = true;
    }

    private async Task RestartGame()
    {
        await OnRestartGame.InvokeAsync();
    }

    private async Task HandleSaveScore(string username)
    {
        try
        {
            showUsernamePrompt = false;
            StateHasChanged();

            // Create request DTO
            var request = new GameResultsRequestDto
            {
                GameId = Guid.NewGuid().ToString(),
                Username = username,
                Difficulty = GameSession.Difficulty.ToString(),
                Questions = GameSession.Questions.Select(q => new QuestionResultDto
                {
                    Id = q.Id,
                    Number1 = q.Number1,
                    Number2 = q.Number2,
                    Operation = q.Operation.ToString(),
                    CorrectAnswer = q.CorrectAnswer,
                    UserAnswer = q.UserAnswer ?? 0,
                    TimeInSeconds = q.TimeInSeconds,
                    PercentageDifference = q.PercentageDifference,
                    Score = q.Score
                }).ToList()
            };

            // Submit game results to Function API
            var response = await FunctionService.SubmitGameResultsAsync(request);
            
            if (response != null)
            {
                currentUserId = request.Username; // Use username as ID for display
                userMadeLeaderboard = response.AddedToLeaderboard;

                // Get updated leaderboard
                var leaderboardResponse = await FunctionService.GetLeaderboardAsync(GameSession.Difficulty.ToString());
                if (leaderboardResponse?.Entries != null)
                {
                    leaderboardEntries = leaderboardResponse.Entries.Select(e => new LeaderboardEntry
                    {
                        Id = e.Id,
                        UserId = e.UserId,
                        Username = e.Username,
                        GameId = e.GameId,
                        Difficulty = e.Difficulty,
                        Score = e.Score,
                        AchievedAt = e.AchievedAt,
                        Rank = e.Rank
                    }).ToList();
                }
                else
                {
                    leaderboardEntries = new List<LeaderboardEntry>();
                }
                
                showLeaderboard = true;
                StateHasChanged();

                // Start analysis asynchronously - don't await to avoid blocking UI
                _ = Task.Run(async () => await StartGameAnalysis(request.GameId, request.Username));
            }
            else
            {
                // Handle error - show leaderboard without user's score
                await HandleSkipSave();
            }
        }
        catch (Exception)
        {
            // Handle error - for now just show leaderboard without user's score
            await HandleSkipSave();
        }
    }

    private async Task HandleSkipSave()
    {
        showUsernamePrompt = false;
        
        // Still show leaderboard even if user skipped
        try
        {
            var difficultyKey = GameSession.Difficulty.ToString();
            var leaderboardResponse = await FunctionService.GetLeaderboardAsync(difficultyKey);
            if (leaderboardResponse?.Entries != null)
            {
                leaderboardEntries = leaderboardResponse.Entries.Select(e => new LeaderboardEntry
                {
                    Id = e.Id,
                    UserId = e.UserId,
                    Username = e.Username,
                    GameId = e.GameId,
                    Difficulty = e.Difficulty,
                    Score = e.Score,
                    AchievedAt = e.AchievedAt,
                    Rank = e.Rank
                }).ToList();
            }
            else
            {
                leaderboardEntries = new List<LeaderboardEntry>();
            }
            showLeaderboard = true;
        }
        catch
        {
            // If we can't load leaderboard, just don't show it
        }
        
        StateHasChanged();
    }

    private string GetRowClass(MathQuestion question)
    {
        return question.PercentageDifference switch
        {
            0 => "table-success",
            <= 10 => "table-warning",
            _ => "table-danger"
        };
    }

    private string GetErrorBadgeClass(double errorPercentage)
    {
        return errorPercentage switch
        {
            0 => "bg-success",
            <= 10 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetOperationColorClass(MathOperation operation)
    {
        return operation switch
        {
            MathOperation.Addition => "text-primary",
            MathOperation.Subtraction => "text-warning", 
            MathOperation.Multiplication => "text-success",
            MathOperation.Division => "text-info",
            _ => "text-muted"
        };
    }

    private string GetOperationIcon(MathOperation operation)
    {
        return operation switch
        {
            MathOperation.Addition => "fas fa-plus text-primary",
            MathOperation.Subtraction => "fas fa-minus text-warning", 
            MathOperation.Multiplication => "fas fa-times text-success",
            MathOperation.Division => "fas fa-divide text-info",
            _ => "fas fa-question text-muted"
        };
    }

    private string GetOperationSymbol(MathOperation operation)
    {
        return operation switch
        {
            MathOperation.Addition => "➕",
            MathOperation.Subtraction => "➖", 
            MathOperation.Multiplication => "✖️",
            MathOperation.Division => "➗",
            _ => "❓"
        };
    }

    private string FormatAnswer(double answer, MathOperation operation)
    {
        return operation switch
        {
            MathOperation.Division => answer.ToString("F1"),
            _ => answer.ToString("F0")
        };
    }

    private string GetRandomPersonality()
    {
        var personalities = Enum.GetValues<AnalysisPersonality>();
        var random = new Random();
        var selectedPersonality = personalities[random.Next(personalities.Length)];
        
        // Map enum to API string values and display names
        var (apiValue, displayName) = selectedPersonality switch
        {
            AnalysisPersonality.Default => ("default", "AI Assistant"),
            AnalysisPersonality.ComedyRoast => ("comedyroast", "Comedy Roaster"),
            AnalysisPersonality.Pirate => ("pirate", "Pirate Captain"),
            AnalysisPersonality.Limerick => ("limerick", "Limerick Poet"),
            AnalysisPersonality.SportsBroadcaster => ("sportsbroadcaster", "Sports Broadcaster"),
            AnalysisPersonality.Haiku => ("haiku", "Haiku Master"),
            AnalysisPersonality.Australian => ("australian", "Aussie Mate"),
            AnalysisPersonality.YourMother => ("yourmother", "Your Mother"),
            _ => ("default", "AI Assistant")
        };
        
        selectedPersonalityDisplay = displayName;
        return apiValue;
    }

    private async Task StartGameAnalysis(string gameId, string username)
    {
        try
        {
            isAnalysisLoading = true;
            StateHasChanged();

            var personality = GetRandomPersonality();
            
            var analysisRequest = new ResultsAnalysisRequestDto
            {
                GameId = gameId,
                Username = username,
                Difficulty = GameSession.Difficulty.ToString(),
                TotalScore = GameSession.TotalScore,
                Questions = GameSession.Questions.Select(q => new QuestionResultDto
                {
                    Id = q.Id,
                    Number1 = q.Number1,
                    Number2 = q.Number2,
                    Operation = q.Operation.ToString(),
                    CorrectAnswer = q.CorrectAnswer,
                    UserAnswer = q.UserAnswer ?? 0,
                    TimeInSeconds = q.TimeInSeconds,
                    PercentageDifference = q.PercentageDifference,
                    Score = q.Score
                }).ToList(),
                Personality = personality
            };

            var analysisResponse = await FunctionService.AnalyzeGameResultsAsync(analysisRequest);
            
            if (analysisResponse != null && !string.IsNullOrEmpty(analysisResponse.Analysis))
            {
                analysisResult = analysisResponse.Analysis;
            }
            else
            {
                analysisResult = "Sorry, the analysis service is currently unavailable. Great job on completing the game!";
                selectedPersonalityDisplay = "System";
            }
        }
        catch (Exception)
        {
            // Handle gracefully - don't show error to user
            analysisResult = "Sorry, the analysis service is currently unavailable. Great job on completing the game!";
            selectedPersonalityDisplay = "System";
        }
        finally
        {
            isAnalysisLoading = false;
            StateHasChanged();
        }
    }
}